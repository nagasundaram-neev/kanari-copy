'use strict';

/* App Module */

var module = angular.module('kanari', []).
  config(['$routeProvider','$locationProvider', function($routeProvider,$locationProvider) {
  	
  $routeProvider.
     when('/login', {title: "Product",templateUrl: "<%= asset_path 'login.html' %>"}).
     when('/forgot_pass', {templateUrl: "<%= asset_path 'forgot_password.html' %>"}).
     when('/api/users/password/edit', {templateUrl: "<%= asset_path 'reset_password.html' %>"}).
     when('/outlets', {templateUrl: "<%= asset_path 'home.html' %>"}).
     when('/createInvitation', {templateUrl: "<%= asset_path 'add_Restaurant.html' %>"}).
     when('/accept_invitation', {templateUrl: "<%= asset_path 'accept_invitation.html' %>"}).
     when('/acceptInvitationStep2', {templateUrl: "<%= asset_path 'accept_invitation_step2.html' %>"}).
     when('/create_outlet', {templateUrl: "<%= asset_path 'create_outlet.html' %>"}).
     when('/create_manager', {templateUrl: "<%= asset_path 'create_manager.html' %>"}).
     when('/list_payment_invoice',{templateUrl:"<%= asset_path 'list_payment_invoice.html'%>"}).
     when('/payment_invoice',{templateUrl:"<%= asset_path 'payment_invoice.html'%>"}).
     when('/take_tour',{templateUrl:"<%= asset_path 'takeTour.html'%>"}).
     when('/create_kanari_code',{templateUrl:"<%= asset_path 'createKanariCode.html'%>"}).
     when('/view_account',{templateUrl:"<%= asset_path 'viewAccount.html.erb'%>"}).
     when('/add_outlet_cuisine_type', {templateUrl: "<%= asset_path 'add_outlet_cuisine_type.html' %>"}).
     when('/outlet_manager', {templateUrl: "<%= asset_path 'outlet_manager.html' %>"}).
     when('/payment_history', {templateUrl: "<%= asset_path 'paymentHistory.html' %>"}).
     when('/outlet_manager_account', {templateUrl: "<%= asset_path 'outlet_manager_account.html' %>"}).
     when('/logout', {templateUrl: "<%= asset_path 'logOut.html' %>"}).
     when('/comments', {templateUrl: "<%= asset_path 'dashboard_comments.html' %>"}).
     when('/trends', {templateUrl: "<%= asset_path 'dashboard_trends.html' %>"}).
     when('/snapshot', {templateUrl: "<%= asset_path 'dashboard_snapshot.html' %>"}).
     when('/change_password', {templateUrl: "<%= asset_path 'changePassword.html' %>"}).
     otherwise({redirectTo: '/login'});
     $locationProvider.hashPrefix = "";
}]);


module.directive('map', function($http) {
	return {
		restrict : 'E',
		replace : true,
		template : '<div></div>',
		controller : function($scope) {

		},
		link : function(scope, element, attrs) {					            
			scope.$on('clickMessageFromParent',  function (scopeDetails, msgFromParent) {
			var queryStringId = getUrlVars()["outletId"];
			var geocoder = new google.maps.Geocoder();
			var myOptions = {
			zoom :9,
			minZoom: 6,
			center : new google.maps.LatLng(25.18971, 55.17745),
			mapTypeId : google.maps.MapTypeId.ROADMAP
			};
			if(getCookie('latitude') == "null")
			{
				$('.addMarker').show();
				$('.updateMarker').hide();				
			}
			else{
				
			$('.updateMarker').show();
			$('.addMarker').hide();
				
			}
			 var map = new google.maps.Map(document.getElementById(attrs.id), myOptions);
			var markersArray = [];
			addMarker({
			lat : getCookie('latitude'),
			lng : getCookie('logitude')
			});

			function addMarker(pos) {
			
			if (queryStringId) {
			var myLatlng = new google.maps.LatLng(pos.lat, pos.lng);
			//alert(myLatlng);
			geocoder.geocode({
			"latLng" : myLatlng
			}, function(results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
			var html = results[0].formatted_address;
			}
			var marker = new google.maps.Marker({
			position : myLatlng,
			map : map,
			title : html
			});
			markersArray.push(marker);
			});
			}
			}

			google.maps.event.addListener(map, 'click', function(event) {
			scope.$apply(function() {
			addMarker({
			lat : event.latLng.lat(),
			lng : event.latLng.lng()
			});

			});

			geocoder.geocode({
			"latLng" : event.latLng
			}, function(results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
			var infoWindow = new google.maps.InfoWindow();
			var html = results[0].formatted_address;

			var marker = new google.maps.Marker({
			position : event.latLng,
			map : map,
			title : html
			});
			markersArray.push(marker);

			}
			});

			});
			// end click listener

			var addMarker = function(pos) {
			$('button.enabel_Btn').show();
			$('button.disable_Btn').hide();
			clearOverlays()
			var myLatlng = new google.maps.LatLng(pos.lat, pos.lng);
			setCookie('latitude', pos.lat, 0.29);
			setCookie('logitude', pos.lng, 0.29);
			
			}//end addMarker
			function clearOverlays() {
			if (markersArray) {
			for (var j in markersArray) {
			markersArray[j].setMap(null);
			}
			}
			}
			
			
    
			function getUrlVars() {
			var vars = [], hash;
			var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
			for (var i = 0; i < hashes.length; i++) {
			hash = hashes[i].split('=');
			vars.push(hash[0]);
			vars[hash[0]] = hash[1];
			}
			return vars;
			}

			})
		}
	};
});

module.directive('hcPie', function () {
  return {
    restrict: 'C',
    replace: true,
    scope: {
      items: '='
    },
    controller: function ($scope, $element, $attrs) {
      console.log(2);

    },
    template: '<div id="container" style="margin: 0 auto">not working</div>',
    link: function (scope, element, attrs) {
      console.log(3);
      var chart = new Highcharts.Chart({
        chart: {
          renderTo: 'container',
          plotBackgroundColor: null,
          plotBorderWidth: null,
          plotShadow: false
        },
        title: {
          text: 'Browser market shares at a specific website, 2010'
        },
        tooltip: {
          pointFormat: '{series.name}: <b>{point.percentage}%</b>',
          percentageDecimals: 1
        },
        plotOptions: {
          column: {
          	 stacking: 'normal',
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
              enabled: true,
              color: '#000000',
              connectorColor: '#000000',
              formatter: function () {
                return '<b>' + this.point.name + '</b>: ' + this.percentage + ' %';
              }
            }
          }
        },
        series: [{
          type: 'column',
          name: 'Browser share',
          data: scope.items
        }]
      });
      scope.$watch("items", function (newValue) {
        chart.series[0].setData(newValue, true);
      }, true);
      
    }
  }
});

module.directive('showtab',
    function () {
        return {
            link: function (scope, element, attrs) {
                element.click(function(e) {
                    e.preventDefault();
                    $(element).tab('show');
                });
            }
        };
    });

module.directive('ngModelOnblur',
    function () {
        return {
            link: function (scope, element, attrs) {
                 element.bind('blur', function() {
                scope.$apply(function() {
                $('#tabBtn').removeClass("tabletBtn1");
               $('#tabBtn').removeAttr("style");
                });         
            });
            }
        };
    });
  
function getCookie(name) {
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ')
		c = c.substring(1, c.length);
		if (c.indexOf(nameEQ) == 0)
			return c.substring(nameEQ.length, c.length);
	}
	return null;
}

function MapCtrl($scope,$http) {

	$scope.$broadcast('clickMessageFromParent', {
		// data: "SOME msg to the child"
	});
	
	$scope.addMark = function(){
		console.log(getCookie('authToken'));
		var queryStringId = getUrlVars()["outletId"];
		$scope.cuisineTypesapp = [];
			$scope.outletTypesapp = [];
			$scope.cuisineTypesapp = getCookie('currentCuisineList');
			$scope.outletTypesapp = getCookie('currentOutletList');
			var params = {
			"outlet" : {
			"latitude" : getCookie('latitude'),
			"longitude" : getCookie('logitude'),
			//"cuisine_type_ids" : JSON.parse($scope.cuisineTypesapp),
			//"outlet_type_ids" : JSON.parse($scope.outletTypesapp),
			//"has_delivery" :getCookie('radiobtn1'),
			//"serves_alcohol" : getCookie('radiobtn2'),
			//"has_outdoor_seating" : getCookie('radiobtn3')
			},
			"auth_token" : getCookie('authToken')
			}
			if (queryStringId) {

			$http({
			method : 'PUT',
			url : '/api/outlets/' + queryStringId,
			data : params,
			}).success(function(data, status) {
			console.log("data in success " + data + " status " + status);
			$scope.successLocation = true;
			}).error(function(data, status) {
			console.log("data in error" + data + " status " + status);
			$scope.successLocation = false;
			});
			}
			else{
			$http({
			method : "PUT",
			url : '/api/outlets/' + getCookie('currentOutlet'),
			data : params,
			}).success(function(data, status) {
				$scope.successLocation = true;

			}).error(function(data, status) {
				$scope.successLocation = false;

			});
			}
	}

function getUrlVars() {
			var vars = [], hash;
			var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
			for (var i = 0; i < hashes.length; i++) {
			hash = hashes[i].split('=');
			vars.push(hash[0]);
			vars[hash[0]] = hash[1];
			}
			return vars;
			}
}


	
module.directive('passwordValidate', function() {
	return {		 
		require : 'ngModel',
		replace: true,
		link : function(scope, elm, attrs, ctrl,ngModel) {			
			ctrl.$parsers.unshift(function(viewValue) {				
				scope.pwdValidLength = (viewValue && viewValue.length >= 8 ? 'valid' : undefined);
				scope.pwdHasLetter = (viewValue && /[A-z]/.test(viewValue)) ? 'valid' : undefined;
				scope.pwdHasNumber = (viewValue && /\d/.test(viewValue)) ? 'valid' : undefined;
				if (scope.pwdValidLength && scope.pwdHasLetter && scope.pwdHasNumber) {
					ctrl.$setValidity('pwd', true);
					return viewValue;
				} else {
					ctrl.$setValidity('pwd', false);
					return undefined;
				}

			});
		}
	};
}); 
module.filter('fromNow', function() {
  return function(date) {
    return moment(date).fromNow();
  }
});

module.directive('autoComplete', function(autoCompleteDataService) {
    return {
        restrict: 'A',
        link: function(scope, elem, attr, ctrl) {
                    // elem is a jquery lite object if jquery is not present,
                    // but with jquery and jquery ui, it will be a full jquery object.
            elem.autocomplete({
                source: autoCompleteDataService.getSource(), //from your service
                minLength: 2
            });
        }
    };
});



